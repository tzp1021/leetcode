//Fight!

//Single Number
class Solution {
public:
    int singleNumber(int A[], int n) {
        int ans=0;
        for(int i=0;i<n;i++)
            ans=ans^A[i];
        return ans;
    }
};

//Maximum Depth of Binary Tree
class Solution {
public:
    int maxDepth(TreeNode *root) {
        int max_depth=0;
        go(root,0,max_depth);
        return max_depth;
    }
    void go(TreeNode *node,int depth, int &max_depth) {
        if(node!=NULL) {
            depth++;
            if(depth>max_depth)
                max_depth=depth;
            go(node->left,depth,max_depth);
            go(node->right,depth,max_depth);
        }
    }
};

//Same Tree
class Solution {
public:
    bool isSameTree(TreeNode *node1, TreeNode *node2) {
         if(node1!=NULL && node2==NULL)
            return false;
        else if(node1==NULL && node2!=NULL)
            return false;
        else if(node1!=NULL && node2!=NULL) {
            if(node1->val!=node2->val)
                return false;
            else
                return isSameTree(node1->left,node2->left) && isSameTree(node1->right,node2->right);
        }
        return true;
    }
};

//Reverse Integer
class Solution {
public:
    int reverse(int x) {
       int ans=0;
        while(x) {
        	ans=ans*10+x%10;
            x/=10;
        }
        return ans;
    }
};

//Best Time to Buy and Sell Stock II
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n=prices.size();
        if(n==0)
            return 0;
        int buy=prices[0];
        int ans=0;
        for(int i=1;i<n;i++) {
            if(prices[i]>buy)
                ans+=prices[i]-buy;
            buy=prices[i];
        }
        return ans;
    }
};

//Linked List Cycle 
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* one=head;
        ListNode* two=head;
        while(two!=NULL) {
            if(one->next!=NULL)
                one=one->next;
            if(two->next!=NULL && two->next->next!=NULL)
                two=two->next->next;
            else
                return false;
            if(one==two)
                return true;
        }
    }
};

//Unique Binary Search Trees
class Solution {
public:
    int numTrees(int n) {
        if(n==0)
            return 1;
        int ans=0;
        for(int i=1;i<=n;i++)
            ans+=numTrees(i-1)*numTrees(n-i);
        return ans;    
    }
};

//Populating Next Right Pointers in Each Node 
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(root==NULL)
            return ;
        if(root->left!=NULL && root->right!=NULL)
            root->left->next=root->right;
        if(root->right!=NULL && root->next!=NULL)
            root->right->next=root->next->left;
        connect(root->left);
        connect(root->right);
    }
};

//Search Insert Position
class Solution {
public:
    int searchInsert(int A[], int n, int target) {
        int i=0,j=n-1;
        while(i<=j) {
            int mid=(i+j)/2;
            if(target<=A[mid])
                j=mid-1;
            else
                i=mid+1;
        }
        return i;
    }
};

//Remove Duplicates from Sorted List
class Solution {
public:
    ListNode *deleteDuplicates(ListNode *head) {
        ListNode* ans=head;
        if(head==NULL)
            return ans;
        while(head->next!=NULL) {
            if(head->val==head->next->val) {
                ListNode* tmp=head->next;
                head->next=tmp->next;
                delete(tmp);
            }
            else
                head=head->next;
        }
        return ans;
    }
};

//Binary Tree Inorder Traversal 
class Solution {
public:
    vector<int> inorderTraversal(TreeNode *root) {
        vector<int> ans;
        if(root!=NULL)
            inorderTravel(root,ans);
        return ans;
    }
    void inorderTravel(TreeNode *node, vector<int> &v) {
        if(node->left!=NULL)
            inorderTravel(node->left,v);
        v.push_back(node->val);
        if(node->right!=NULL)
            inorderTravel(node->right,v);
    }
};

//Binary Tree Preorder Traversal
class Solution {
public:
    vector<int> preorderTraversal(TreeNode *root) {
        vector<int> ans;
        if(root!=NULL)
            preorderTravel(root,ans);
        return ans;
    }
    void preorderTravel(TreeNode *node, vector<int> &v) {
        v.push_back(node->val);
        if(node->left!=NULL)
            preorderTravel(node->left,v);
        if(node->right!=NULL)
            preorderTravel(node->right,v);
    }
};

//Climbing Stairs
class Solution {
public:
    int climbStairs(int n) {
        int a[2]={1,1},k;
        for(k=2;k<=n;k++) {
            a[k%2]=a[0]+a[1];
        }
        return a[(k+1)%2];
    }
};

//Remove Element
class Solution {
public:
    int removeElement(int A[], int n, int elem) {
        int i=0,j=n-1;
        while(i<=j) {
            while(i<n && A[i]!=elem)
                i++;
            while(j>=0 && A[j]==elem)
                j--;
            if(i>j)
                break;
            int t=A[i];
            A[i++]=A[j];
            A[j--]=t;
        }
        return i;
    }
};

//Remove Duplicates from Sorted Array
class Solution {
public:
    int removeDuplicates(int A[], int n) {
        if(n==0)
            return 0;
        int i=1;
        while(i<n && A[i-1]<A[i])
            i++;
        int j=i+1;
        while(j<n) {
            while(j<n && A[j]<=A[j-1])
                j++;
            if(j>=n)
                break;
            A[i++]=A[j++];
        }
        return i;
    }
};

//Maximum Subarray 
class Solution {
public:
    int maxSubArray(int A[], int n) {
        int ans=A[0],tmp=A[0];
        for(int i=1;i<n;i++) {
            tmp=(tmp<0) ? 0 : tmp;
            tmp+=A[i];
            ans=(tmp>ans) ? tmp : ans;
        }
        return ans;
    }
};

//Symmetric Tree 
class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        if(root!=NULL)
            return isSame(root->left, root->right);
        return true;
    }
    bool isSame(TreeNode *node1, TreeNode *node2) {
        if(node1==NULL && node2==NULL)
            return true;
        if(node1!=NULL && node2==NULL)
            return false;
        if(node1==NULL && node2!=NULL)
            return false;
        if(node1->val!=node2->val)
            return false;
        return isSame(node1->left,node2->right) 
            && isSame(node1->right, node2->left);
    }
};

//Merge Two Sorted Lists
class Solution {
public:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        if(l2==NULL)
            return l1;
        if(l1==NULL)
            return l2;
        ListNode *ans=l1;
        if(l1->val > l2->val) {
            l1=l2;
            l2=ans;
            ans=l1;
        }
        while(l1->next!=NULL && l2!=NULL) {
            if(l1->next->val > l2->val) {
                ListNode *t1=l1->next;
                ListNode *t2=l2->next;
                l1->next=l2;
                l2->next=t1;
                l1=l2;
                l2=t2;
            }
            else
                l1=l1->next;
        }
        if(l2!=NULL)
            l1->next=l2;
        return ans;
    }
};

//Convert Sorted Array to Binary Search Tree
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *sortedArrayToBST(vector<int> &num) {
        int n=num.size();
        if(n==0) 
            return NULL;
        TreeNode *root=new TreeNode(0);
        construct(num,0,n-1,root);
        return root;
    }
    void construct(vector<int> &num, int i, int j, TreeNode *node) {
        int mid=(i+j)/2;
        node->val=num[mid];
        if(i<mid) {
            TreeNode *l=new TreeNode(0);
            node->left=l;
            construct(num,i,mid-1,l);
        }
        if(j>mid) {
            TreeNode *r=new TreeNode(0);
            node->right=r;
            construct(num,mid+1,j,r);
        }
    }
};

//Next Permutation 
class Solution {
public:
    void nextPermutation(vector<int> &num) {
        const int n=num.size();
        int start=n-1;
        while(start>0 && num[start]<=num[start-1])
            start--;
        if(start>0) {
            int index=start;
            for(int i=start+1;i<n;i++)
                if(num[i]>num[start-1] && num[i]<num[index])
                    index=i;
            int tmp=num[index];
            num[index]=num[start-1];
            num[start-1]=tmp;
        }
        sort(num,start,n-1);
    }
    void sort(vector<int> &num,int s,int e) {
        if(s>=e)
            return;
        int i=s+1;
        int j=e;
        while(i<=j) {
            while(i<=e && num[i]<=num[s])
                i++;
            while(j>=s && num[j]>num[s])
                j--;
            if(i>=j)
                break;
            int t=num[i];
            num[i]=num[j];
            num[j]=t;
        }
        int t=num[s];
        num[s]=num[j];
        num[j]=t;
        if(j-1>s)
            sort(num,s,j-1);
        if(i<e)
            sort(num,i,e);
    }
};

//Merge Sorted Array
class Solution {
public:
    void merge(int A[], int m, int B[], int n) {
        int k=m+n-1;
        int i=m-1;
        int j=n-1;
        while(i>=0 && j>=0) {
            if(A[i]>=B[j]) 
                A[k--]=A[i--];
            else
                A[k--]=B[j--];
        }
        if(i<0) {
            while(j>=0)
                A[k--]=B[j--];
        }
    }
};

//Submission Details
class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        if(head==NULL || head->next==NULL)
            return head;
        ListNode *cur=head;
        head=head->next;
        cur->next=head->next;
        head->next=cur;
        ListNode *tmp;
        while(cur->next!=NULL && cur->next->next!=NULL) {
            tmp=cur->next;
            cur->next=tmp->next;
            tmp->next=cur->next->next;
            cur->next->next=tmp;
            cur=tmp;
        }
        return head;
    }
};

//Pascal's Triangle
class Solution {
public:
    vector<vector<int> > generate(int numRows) {
        vector<vector<int> > ans;
        for(int i=0;i<numRows;i++) {
            vector<int> cur;
            cur.push_back(1);
            for(int j=1;j<i;j++) 
                cur.push_back(ans[i-1][j-1]+ans[i-1][j]);
            if(i>0)
                cur.push_back(1);
            ans.push_back(cur);
        }
        return ans;
    }
};

//Best Time to Buy and Sell Stock 
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n=prices.size();
        int ans=0,tmp=0;
        for(int i=1;i<n;i++) {
            tmp+=prices[i]-prices[i-1];
            if(tmp>ans)
                ans=tmp;
            if(tmp<0)
                tmp=0;
        }
        return ans;
    }
};

//Balanced Binary Tree
class Solution {
public:
    bool isBalanced(TreeNode *root) {
        if(root==NULL)
            return true;
        int c=height(root->left)-height(root->right);
        if(c>=-1 && c<=1 && isBalanced(root->left) && isBalanced(root->right))
            return true;
        return false;
    }
    int height(TreeNode *node) {
        if(node==NULL)
            return 0;
        return max(height(node->left),height(node->right))+1;
    }
};

//Gray Code
class Solution {
public:
    vector<int> grayCode(int n) {
        vector<int> ans;
        ans.push_back(0);
        int k=1;
        for(int i=0;i<n;i++) {
            for(int j=k-1;j>=0;j--) 
                ans.push_back(ans[j]+k);
            k=k<<1;
        }
        return ans;
    }
};

//Binary Tree Level Order Traversal II 
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        vector<vector<int> > ans;
        if(root==NULL)
            return ans;
        queue<TreeNode*> level;
        int width=1;
        level.push(root);
        while(!level.empty()) {
            int num=0;
            vector<int> v;
            for(int i=0;i<width;i++) {
                TreeNode *node=level.front();
                level.pop();
                v.push_back(node->val);
                if(node->left!=NULL) {
                    level.push(node->left);
                    num++;
                }
                if(node->right!=NULL) {
                    level.push(node->right);
                    num++;
                }
            }
            width=num;
            ans.push_back(v);
        }
        int n=ans.size()-1;
        vector<vector<int> > fin_ans;
        while(n>=0) 
            fin_ans.push_back(ans[n--]);
        return fin_ans;
    }
};

//Permutations 
class Solution {
public:
    vector<vector<int> > permute(vector<int> &num) {
        vector<vector<int> > ans;
        int n=num.size();
        go(ans,num,n,0);
        return ans;
    }
    void go(vector<vector<int> > &ans,vector<int> &num, int n,int k) {
        if(k==n) {
            ans.push_back(num);
            return;
        }
        for(int i=k;i<n;i++) {
            swap(num,i,k);
            go(ans,num,n,k+1);
            swap(num,i,k);
        }
    }
    void swap(vector<int> &num, int i, int k) {
        int tmp=num[i];
        num[i]=num[k];
        num[k]=tmp;
    }
};

//Minimum Path Sum 
class Solution {
public:
    int minPathSum(vector<vector<int> > &grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<int> v;
        int tmp=0;
        for(int i=0;i<n;i++) {
            tmp+=grid[0][i];
            v.push_back(tmp);
        }
        for(int i=1;i<m;i++) {
            v[0]+=grid[i][0];
            for(int j=1;j<n;j++) 
                v[j]=min(v[j],v[j-1])+grid[i][j];
        }
        return v[n-1];
    }
};

//Single Number II
class Solution {
public:
    int singleNumber(int A[], int n) {
        int bits[32];
        memset(bits,0,sizeof(bits));
        for(int i=0;i<n;i++) {
            int num=A[i];
            int k=0;
            for(int j=0;j<32;j++) {
                bits[k++]+=num&1;
                num=num>>1;
            }
        }
        int ans=0;
        long long k=1;
        for(int i=0;i<31;i++) {
            bits[i]%=3;
            if(bits[i]!=0)
                ans+=k;
            k=k<<1;
        }
        if(bits[31]%3!=0)
            ans=(long long)ans-k;
        return ans;
    }
};

//Unique Paths 
class Solution {
public:
    int uniquePaths(int m, int n) {
        int a[105];
        for(int i=0;i<n;i++)
            a[i]=1;
        for(int i=1;i<m;i++)
            for(int j=1;j<n;j++)
                a[j]=a[j]+a[j-1];
        return a[n-1];
    }
};

//Rotate Image 
class Solution {
public:
    void rotate(vector<vector<int> > &matrix) {
        int n=matrix.size();
        for(int i=0;i<n/2;i++) {
            for(int j=i;j<n-i-1;j++) {
                int tmp=matrix[i][j];
                matrix[i][j]=matrix[n-1-j][i];
                matrix[n-1-j][i]=matrix[n-1-i][n-1-j];
                matrix[n-1-i][n-1-j]=matrix[j][n-1-i];
                matrix[j][n-1-i]=tmp;
            }
        }
    }
};

//Linked List Cycle II 
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *oneStep=head;
        ListNode *twoStep=head;
        while(twoStep!=NULL) {
            if(oneStep->next!=NULL)
                oneStep=oneStep->next;
            if(twoStep->next!=NULL && twoStep->next->next!=NULL)
                twoStep=twoStep->next->next;
            else
                return NULL;
            if(oneStep==twoStep) 
                break;
        }
        ListNode *start=head;
        while(1) {
            if(start==oneStep)
                return start;
            oneStep=oneStep->next;
            while(oneStep!=twoStep) {
                if(start==oneStep)
                    return start;
                oneStep=oneStep->next;
            }
            start=start->next;
        }
    }
};

//Search a 2D Matrix 
class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        int i=0;
        int j=m-1;
        while(i<=j) {
            int mid=(i+j)/2;
            if(matrix[mid][0]<=target)
                i=mid+1;
            else
                j=mid-1;
        }
        if(j<0)
            return false;
        int ii=0;
        int jj=n-1;
        while(ii<=jj) {
            int mid=(ii+jj)/2;
            if(matrix[j][mid]<=target)
                ii=mid+1;
            else
                jj=mid-1;
        }
        if(jj<0)
            return false;
        if(matrix[j][jj]==target)
            return true;
    }
};

//Plus One class Solution {
public:
    vector<int> plusOne(vector<int> &digits) {
        vector<int> ans;
        int n=digits.size()-1;
        while(n>=0 && digits[n]==9) {
            ans.insert(ans.begin(),0);
            n--;
        }
        if(n<0)
            ans.insert(ans.begin(),1);
        else {
            ans.insert(ans.begin(),digits[n--]+1);
            while(n>=0)
                ans.insert(ans.begin(),digits[n--]);
        }
        return ans;
    }
};

//Jump Game
class Solution {
public:
    bool canJump(int A[], int n) {
        int maxx=0;
        for(int i=0;i<n;i++) {
            if(i>maxx)
                break;
            maxx=(maxx>=A[i]+i) ? maxx : A[i]+i;
            if(maxx>=n-1)
                return true;
        }
        return false;
    }
};

//Binary Tree Postorder Traversal 
class Solution {
public:
    vector<int> postorderTraversal(TreeNode *root) {
        vector<int> ans;
        if(root!=NULL)
            postTravel(root,ans);
        return ans;
    }
    void postTravel(TreeNode *node, vector<int> &ans) {
        if(node->left!=NULL)
            postTravel(node->left,ans);
        if(node->right!=NULL)
            postTravel(node->right,ans);
        ans.push_back(node->val);
    }
};

//Binary Tree Level Order Traversal 
class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        vector<vector<int> > ans;
        if(root==NULL)
            return ans;
        queue<TreeNode*> level;
        int width=1;
        level.push(root);
        while(!level.empty()) {
            int num=0;
            vector<int> v;
            for(int i=0;i<width;i++) {
                TreeNode *node=level.front();
                level.pop();
                v.push_back(node->val);
                if(node->left!=NULL) {
                    level.push(node->left);
                    num++;
                }
                if(node->right!=NULL) {
                    level.push(node->right);
                    num++;
                }
            }
            width=num;
            ans.push_back(v);
        }
        return ans;
    }
};

//Jump Game II
class Solution {
public:
    int jump(int A[], int n) {
        int ans=0;
        int num=0;
        int maxx=0;
        int i=0;
        while(maxx<n-1) {
            while(i<=num) {
                if(i+A[i]>maxx)
                    maxx=i+A[i];
                i++;
            }
            if(num==maxx)
                return -1;//could not reach
            num=maxx;
            ans++;
        }
        return ans;
    }
};

//Combinations 
class Solution {
public:
    vector<vector<int> > combine(int n, int k) {
        vector<vector<int> > ans;
        vector<int> cur;
        go(1,n,k,ans,cur);
        return ans;
    }
    void go(int s,int n,int k,vector<vector<int> > &ans, vector<int> &cur) {
        if(k==0) {
            ans.push_back(cur);
            return;
        }
        for(int i=s;i<=n-k+1;i++) {
            cur.push_back(i);
            go(i+1,n,k-1,ans,cur);
            cur.pop_back();
        }
    }
};

//Container With Most Water 
class Solution {
public:
    int maxArea(vector<int> &height) {
        int j=height.size()-1;
        int i=0;
        int ans=0;
        while(i<j) {
            int tmp=min(height[i],height[j])*(j-i);
            ans=(tmp>ans)? tmp : ans;
            if(height[i]>height[j]) {
                int k=j-1;
                while(k>i && height[k]<=height[j])
                    k--;
                j=k;
            }
            else {
                int k=i+1;
                while(k<j && height[k]<=height[i])
                    k++;
                i=k;
            }
        }
        return ans;
    }
};

//Sort Colors 
class Solution {
public:
    void sortColors(int A[], int n) {
        int i=0;
        while(i<n && A[i]==0)
            i++;
        int j=n-1;
        while(j>=0 && A[j]==2)
            j--;
        int k=i;
        while(k<=j) {
            if(k<j && A[k]==2) {
                A[k]=A[j];
                A[j--]=2;
                while(j>=0 && A[j]==2)
                    j--;
            }
            else if(i<k && A[k]==0) {
                A[k]=A[i];
                A[i++]=0;
                while(i<n && A[i]==0)
                    i++;
            }
            else
                k++;
        }
    }
};

//Path Sum
class Solution {
public:
    bool hasPathSum(TreeNode *root, int sum) {
        return go(root,0,sum);
    }
    bool go(const TreeNode *node, int s, const int &sum) {
        if(node==NULL)
            return false;
        s+=node->val;
        if(node->left==NULL && node->right==NULL) {
            if(s==sum)
                return true;
            else
                return false;
        }
        return go(node->left, s, sum) || go(node->right, s, sum);
    }
};

//Pascal's Triangle II 
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> ans;
        ans.push_back(1);
        for(int i=1;i<=rowIndex;i++) {
            ans.push_back(1);
            for(int j=i-1;j>0;j--)
                ans[j]+=ans[j-1];
        }
        return ans;
    }
};

//Search in Rotated Sorted Array
class Solution {
public:
    int search(int A[], int n, int target) {
        int i=0;
        int j=n-1;
        int mid;
        while(A[i]>A[j]) {
            mid=(i+j)/2;
            if(A[i]>=A[mid])
                j=mid;
            else
                i=mid;
        }
        mid=j;
        if(target>=A[0])
            return binarySearch(0,mid,A,target);
        else
            return binarySearch(mid+1,n-1,A,target);
    }
    int binarySearch(int i, int j, const int A[], const int target) {
        while(i<=j) {
            int mid=(i+j)/2;
            if(target==A[mid])
                return mid;
            if(target>A[mid])
                i=mid+1;
            else
                j=mid-1;
        }
        return -1;
    }
};

//Search in Rotated Sorted Array II
class Solution {
public:
    bool search(int A[], int n, int target) {
        int mid=0;
        while(mid<n-1 && A[mid]<=A[mid+1])
            mid++;
        if(target>=A[0])
            return binarySearch(0,mid,A,target);
        else
            return binarySearch(mid+1,n-1,A,target);
    }
    bool binarySearch(int i, int j, const int A[], const int target) {
        while(i<=j) {
            int mid=(i+j)/2;
            if(target==A[mid])
                return true;
            if(target>A[mid])
                i=mid+1;
            else
                j=mid-1;
        }
        return false;
    }
};

//Remove Nth Node From End of List
class Solution {
public:
    ListNode *removeNthFromEnd(ListNode *head, int n) {
        ListNode dummy(0);
        dummy.next=head;
        ListNode *front, *back;
        front=back=&dummy;
        for(int i=0;i<n;i++)
            back=back->next;
        while(back!=NULL && back->next!=NULL) {
            front=front->next;
            back=back->next;
        }
        ListNode *tmp=front->next;
        front->next=tmp->next;
        delete tmp;
        return dummy.next;
    }
};

//Populating Next Right Pointers in Each Node II 
class Solution {
public:
    void connect(TreeLinkNode *root) {
        TreeLinkNode *current=root;
        while(true) {
            TreeLinkNode *start=NULL;
            TreeLinkNode *left=NULL;
            while(current!=NULL) {
                if(current->left!=NULL) {
                    if(start==NULL) {
                        start=current->left;
                        left=start;
                    }
                    else {
                        left->next=current->left;
                        left=left->next;
                    }
                }
                if(current->right!=NULL) {
                    if(start==NULL) {
                        start=current->right;
                        left=start;
                    }
                    else {
                        left->next=current->right;
                        left=left->next;
                    }
                }
                current=current->next;
            }
            if(left!=NULL) {
                left->next=NULL;
                current=start;    
            }
            else
                break;
        }
    }
};

//Sum Root to Leaf Numbers
class Solution {
public:
    int sumNumbers(TreeNode *root) {
        return go(root,0);
    }
    int go(const TreeNode * const node, const int num) {
        if(node==NULL)
            return 0;
        int tmp=num*10+node->val;
        if(node->left==NULL && node->right==NULL)
            return tmp;
        return go(node->left,tmp)+go(node->right,tmp);
    }
};

//Minimum Depth of Binary Tree
class Solution {
public:
    int minDepth(TreeNode *root) {
        int ans=0;
        go(root,1,ans);
        return ans;
    }
    void go(const TreeNode * const node, const int n, int &ans) {
        if(node==NULL)
            return ;
        if(ans!=0 && n>=ans)
            return ;
        if(node->left==NULL && node->right==NULL) {
            ans=n;
            return ;
        }
        go(node->left,n+1,ans);
        go(node->right,n+1,ans);
        
    }
};

//Trapping Rain Water
class Solution {
public:
    int trap(int A[], int n) {
        stack<int> desc_que;
        int ans=0;
        desc_que.push(0);
        for(int i=1;i<n;i++) {
            int tmp=A[desc_que.top()];
            while(!desc_que.empty() && A[i]>tmp) {
                desc_que.pop();
                if(desc_que.empty())
                    break;
                if(A[desc_que.top()]<A[i]) 
                    ans+=(A[desc_que.top()]-tmp)*(i-desc_que.top()-1);
                else
                    ans+=(A[i]-tmp)*(i-desc_que.top()-1);
                tmp=A[desc_que.top()];
            }
            if(desc_que.empty() || A[i]<tmp) {
                desc_que.push(i);
            }
            else if(A[i]==tmp) {
                desc_que.pop();
                desc_que.push(i);
            }
        }
        return ans;
    }
};

//Length of Last Word
class Solution {
public:
    int lengthOfLastWord(const char *s) {
        int i=0;
        int ans=0;
        int tmp=0;
        while(s[i]!=NULL) {
            if(s[i++]!=' ')
                tmp++;
            else {
                ans=(tmp==0)? ans : tmp;
                tmp=0;
            }
        }
        ans=(tmp==0)? ans : tmp;
        return ans;
    }
};

//Valid Parentheses
class Solution {
public:
    bool isValid(string s) {
        stack<char> sta;
        int len=s.length();
        for(int i=0;i<len;i++) {
            if(s[i]=='(' || s[i]=='[' || s[i]=='{')
                sta.push(s[i]);
            else if(sta.empty() || 
                    ((s[i]==')' && sta.top()!='(')) ||
                    ((s[i]==']' && sta.top()!='[')) ||
                    ((s[i]=='}' && sta.top()!='{')) )
                    return false;
            else sta.pop();
        }
        if(sta.empty())
            return true;
        return false;
    }
};

//Path Sum II 
class Solution {
public:
    vector<vector<int> > pathSum(TreeNode *root, int tar) {
        vector<vector<int> > ans;
        vector<int> path;
        go(root,0,tar,path,ans);
        return ans;
    }
    void go(const TreeNode * const node, int sum, const int tar,
                vector<int> &path, vector<vector<int> > &ans) {
        if(node==NULL)
            return ;
        path.push_back(node->val);
        sum+=node->val;
        if(node->left==NULL && node->right==NULL && sum==tar) 
            ans.push_back(path);
        go(node->left, sum, tar, path, ans);
        go(node->right, sum, tar, path, ans);
        path.pop_back();
    }
};

//Valid Sudoku 
class Solution {
public:
    bool isValidSudoku(vector<vector<char> > &board) {
        bool a[10];
        for(int i=0;i<9;i++) {
            memset(a,false,sizeof(a));
            for(int j=0;j<9;j++) {
                if(board[i][j]=='.')
                    continue;
                if(a[board[i][j]-'1']==true) 
                    return false;
                a[board[i][j]-'1']=true;
            }
        }
        for(int j=0;j<9;j++) {
            memset(a,false,sizeof(a));
            for(int i=0;i<9;i++) {
                if(board[i][j]=='.')
                    continue;
                if(a[board[i][j]-'1']==true)
                    return false;
                a[board[i][j]-'1']=true;
            }
        }
        for(int i=0;i<9;i+=3) {
            for(int j=0;j<9;j+=3) {
                memset(a,false,sizeof(a));
                for(int ii=0;ii<3;ii++) {
                    for(int jj=0;jj<3;jj++) {
                        if(board[i+ii][j+jj]=='.')
                        continue;
                        if(a[board[i+ii][j+jj]-'1']==true)
                            return false;
                        a[board[i+ii][j+jj]-'1']=true;
                    }
                }
            }
        }
        return true;
    }
};

//Subsets
class Solution {
public:
    vector<vector<int> > subsets(vector<int> &S) {
        vector<vector<int> > ans;
        vector<int> tmp;
        int n=S.size();
        sort(S.begin(),S.end());
        for(int i=0;i<=n;i++) {
            go(S,i,0,n,ans,tmp);
        }
        return ans;
    } 
    void go(const vector<int> &S, const int left, const int k, 
                const int n, vector<vector<int> > &ans, vector<int> &tmp) {
        if(left==0) {
            ans.push_back(tmp);
            return ;
        }
        for(int i=k;i<n-left+1;i++) {
            tmp.push_back(S[i]);
            go(S,left-1,i+1,n,ans,tmp);
            tmp.pop_back();
        }
    }
};

//Search for a Range 
class Solution {
public:
    vector<int> searchRange(int A[], int n, int target) {
        vector<int> ans;
        int i=0;
        int j=n-1;
        while(i<=j) {
            int mid=(i+j)/2;
            if(A[mid]>=target) 
                j=mid-1;
            else
                i=mid+1;
        }
        if(A[i]==target)
            ans.push_back(i);
        else
            ans.push_back(-1);
        i=0;
        j=n-1;
        while(i<=j) {
            int mid=(i+j)/2;
            if(A[mid]>target) 
                j=mid-1;
            else
                i=mid+1;
        }
        if(A[j]==target)
            ans.push_back(j);
        else
            ans.push_back(-1);
        return ans;
        
    }
};

//N-Queens II 
class Solution {
public:
    int totalNQueens(int n) {
        int *row=new int[n];
        int ans=0;
        go(0,row,ans,n);
        delete []row;
        return ans;
    }
    void go(const int k, int *row, int &ans, const int n) {
        if(k==n) {
            ans++;
            return ;
        }
        for(int i=0;i<n;i++) {
            bool flag=true;
            for(int j=0;j<k;j++) {
                if(i==row[j] || (k-j)==abs(i-row[j])) {
                    flag=false;
                    break;
                }
            }
            if(flag==false)
                continue;
            row[k]=i;
            go(k+1,row,ans,n);
        }
    }
};

//Remove Duplicates from Sorted Array II 
class Solution {
public:
    int removeDuplicates(int A[], int n) {
        if(n<2)
            return n;
        int i=2;
        while(i<n && (A[i-1]!=A[i] || A[i-2]!=A[i]))
            i++;
        int j=i+1;
        while(j<n) {
            while(j<n && (A[j]==A[j-1] && A[j]==A[j-2]))
                j++;
            if(j>=n)
                break;
            swap(A[i],A[j]);
            if(A[i]!=A[i-1] || A[i]!=A[i-2])
                i++;
            j++;
        }
        return i;
    }
};

//Unique Paths II
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        int a[105];
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();
        for(int i=0;i<n;i++)
            if(obstacleGrid[0][i]==1 || (i>0 && a[i-1]==0))
                a[i]=0;
            else
                a[i]=1;
        for(int i=1;i<m;i++) {
            if(obstacleGrid[i][0]==1)
                a[0]=0;
            for(int j=1;j<n;j++)
                if(obstacleGrid[i][j]==0)
                    a[j]=a[j]+a[j-1];
                else
                    a[j]=0;
        }
        return a[n-1];
    }
};

//Longest Common Prefix 
class Solution {
public:
    string longestCommonPrefix(vector<string> &strs) {
        string ans;
        int n=strs.size();
        if(n==0)
            return ans;
        int k=0;
        while(true) {
            if(k==strs[0].length())
                return ans;
            for(int i=1;i<n;i++) {
                if(k==strs[i].length() || strs[i][k]!=strs[0][k])
                    return ans;
            }
            ans+=strs[0][k];
            k++;
        }
        return ans;
    }
};

//Convert Sorted List to Binary Search Tree
class Solution {
public:
    TreeNode *sortedListToBST(ListNode *head) {
        int n=0;
        ListNode *tmp=head;
        while(tmp!=NULL) {
            tmp=tmp->next;
            n++;
        }
        return buildTree(head,0,n);
    }
    TreeNode * buildTree(ListNode *head, const int s, const int n) {
        if(s==n)
            return NULL;
        ListNode *tmp=head;
        for(int i=s;i<(s+n)/2;i++)
            tmp=tmp->next;
        TreeNode *cur=new TreeNode(tmp->val);
        cur->left=buildTree(head,s,(s+n)/2);
        cur->right=buildTree(tmp->next,(s+n)/2+1,n);
        return cur;
    }
};




